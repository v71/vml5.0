#pragma once

//////////////////////////////////////////////////////////////////////////////
// TO DO :

namespace vml
{
	namespace debugrendering
	{

		/////////////////////////////////////////////////////////////////
		// mesh class

		class Sphere
		{
			
			private:
				
				// vertex and surfaces count

				const unsigned int Vertices =1032;	// Vertices for this mesh
				const unsigned int Indices = 1536;	// vbo indices for surfaces

				inline static float VertexPositionArray[] =
				{
					 0.000000f ,  0.000000f , -0.500000f , 1.0f,
					 0.500000f ,  0.000000f ,  0.000000f , 1.0f,
					 0.000000f , -0.500000f ,  0.000000f , 1.0f,
					-0.500000f ,  0.000000f ,  0.000000f , 1.0f,
					 0.000000f ,  0.500000f ,  0.000000f , 1.0f,
					 0.000000f ,  0.000000f ,  0.500000f , 1.0f,
					 0.353553f ,  0.000000f , -0.353553f , 1.0f,
					 0.353553f , -0.353553f ,  0.000000f , 1.0f,
					 0.000000f , -0.353553f , -0.353553f , 1.0f,
					-0.353553f , -0.353553f ,  0.000000f , 1.0f,
					-0.353553f ,  0.000000f , -0.353553f , 1.0f,
					-0.353553f ,  0.353553f ,  0.000000f , 1.0f,
					 0.000000f ,  0.353553f , -0.353553f , 1.0f,
					 0.353553f ,  0.353553f ,  0.000000f , 1.0f,
					 0.000000f , -0.353553f ,  0.353553f , 1.0f,
					 0.353553f ,  0.000000f ,  0.353553f , 1.0f,
					-0.353553f ,  0.000000f ,  0.353553f , 1.0f,
					 0.000000f ,  0.353553f ,  0.353553f , 1.0f,
					 0.191342f ,  0.000000f , -0.461940f , 1.0f,
					 0.204124f , -0.204124f , -0.408248f , 1.0f,
					 0.000000f , -0.191342f , -0.461940f , 1.0f,
					 0.408248f , -0.204124f , -0.204124f , 1.0f,
					 0.204124f , -0.408248f , -0.204124f , 1.0f,
					 0.191342f , -0.461940f ,  0.000000f , 1.0f,
					 0.000000f , -0.461940f , -0.191342f , 1.0f,
					 0.461940f ,  0.000000f , -0.191342f , 1.0f,
					 0.461940f , -0.191342f ,  0.000000f , 1.0f,
					-0.204124f , -0.204124f , -0.408248f , 1.0f,
					-0.191342f ,  0.000000f , -0.461940f , 1.0f,
					-0.204124f , -0.408248f , -0.204124f , 1.0f,
					-0.408248f , -0.204124f , -0.204124f , 1.0f,
					-0.461940f , -0.191342f ,  0.000000f , 1.0f,
					-0.461940f ,  0.000000f , -0.191342f , 1.0f,
					-0.191342f , -0.461940f ,  0.000000f , 1.0f,
					-0.204124f ,  0.204124f , -0.408248f , 1.0f,
					 0.000000f ,  0.191342f , -0.461940f , 1.0f,
					-0.408248f ,  0.204124f , -0.204124f , 1.0f,
					-0.204124f ,  0.408248f , -0.204124f , 1.0f,
					-0.191342f ,  0.461940f ,  0.000000f , 1.0f,
					 0.000000f ,  0.461940f , -0.191342f , 1.0f,
					-0.461940f ,  0.191342f ,  0.000000f , 1.0f,
					 0.204124f ,  0.204124f , -0.408248f , 1.0f,
					 0.204124f ,  0.408248f , -0.204124f , 1.0f,
					 0.408248f ,  0.204124f , -0.204124f , 1.0f,
					 0.461940f ,  0.191342f ,  0.000000f , 1.0f,
					 0.191342f ,  0.461940f ,  0.000000f , 1.0f,
					 0.000000f , -0.191342f ,  0.461940f , 1.0f,
					 0.204124f , -0.204124f ,  0.408248f , 1.0f,
					 0.191342f ,  0.000000f ,  0.461940f , 1.0f,
					 0.204124f , -0.408248f ,  0.204124f , 1.0f,
					 0.408248f , -0.204124f ,  0.204124f , 1.0f,
					 0.461940f ,  0.000000f ,  0.191342f , 1.0f,
					 0.000000f , -0.461940f ,  0.191342f , 1.0f,
					-0.191342f ,  0.000000f ,  0.461940f , 1.0f,
					-0.204124f , -0.204124f ,  0.408248f , 1.0f,
					-0.408248f , -0.204124f ,  0.204124f , 1.0f,
					-0.204124f , -0.408248f ,  0.204124f , 1.0f,
					-0.461940f ,  0.000000f ,  0.191342f , 1.0f,
					 0.000000f ,  0.191342f ,  0.461940f , 1.0f,
					-0.204124f ,  0.204124f ,  0.408248f , 1.0f,
					-0.204124f ,  0.408248f ,  0.204124f , 1.0f,
					-0.408248f ,  0.204124f ,  0.204124f , 1.0f,
					 0.000000f ,  0.461940f ,  0.191342f , 1.0f,
					 0.204124f ,  0.204124f ,  0.408248f , 1.0f,
					 0.408248f ,  0.204124f ,  0.204124f , 1.0f,
					 0.204124f ,  0.408248f ,  0.204124f , 1.0f,
					 0.097544f ,  0.000000f , -0.490393f , 1.0f,
					 0.099377f , -0.099377f , -0.479842f , 1.0f,
					 0.000000f , -0.097544f , -0.490393f , 1.0f,
					 0.202308f , -0.104423f , -0.445160f , 1.0f,
					 0.104423f , -0.202308f , -0.445160f , 1.0f,
					 0.105662f , -0.288675f , -0.394338f , 1.0f,
					 0.000000f , -0.277785f , -0.415735f , 1.0f,
					 0.277785f ,  0.000000f , -0.415735f , 1.0f,
					 0.288675f , -0.105662f , -0.394338f , 1.0f,
					 0.213201f , -0.319801f , -0.319801f , 1.0f,
					 0.105662f , -0.394338f , -0.288675f , 1.0f,
					 0.319801f , -0.213201f , -0.319801f , 1.0f,
					 0.319801f , -0.319801f , -0.213201f , 1.0f,
					 0.394338f , -0.288675f , -0.105662f , 1.0f,
					 0.288675f , -0.394338f , -0.105662f , 1.0f,
					 0.394338f , -0.105662f , -0.288675f , 1.0f,
					 0.104423f , -0.445160f , -0.202308f , 1.0f,
					 0.000000f , -0.415735f , -0.277785f , 1.0f,
					 0.202308f , -0.445160f , -0.104423f , 1.0f,
					 0.099378f , -0.479841f , -0.099377f , 1.0f,
					 0.097545f , -0.490393f ,  0.000000f , 1.0f,
					 0.000000f , -0.490393f , -0.097544f , 1.0f,
					 0.277785f , -0.415735f ,  0.000000f , 1.0f,
					 0.415735f ,  0.000000f , -0.277785f , 1.0f,
					 0.445160f , -0.104423f , -0.202308f , 1.0f,
					 0.479841f , -0.099377f , -0.099377f , 1.0f,
					 0.445160f , -0.202308f , -0.104423f , 1.0f,
					 0.415735f , -0.277785f ,  0.000000f , 1.0f,
					 0.490393f ,  0.000000f , -0.097544f , 1.0f,
					 0.490393f , -0.097544f ,  0.000000f , 1.0f,
					-0.099377f , -0.099377f , -0.479842f , 1.0f,
					-0.097544f ,  0.000000f , -0.490393f , 1.0f,
					-0.104423f , -0.202308f , -0.445160f , 1.0f,
					-0.202308f , -0.104423f , -0.445160f , 1.0f,
					-0.288675f , -0.105662f , -0.394338f , 1.0f,
					-0.277785f ,  0.000000f , -0.415735f , 1.0f,
					-0.105662f , -0.288675f , -0.394338f , 1.0f,
					-0.319801f , -0.213201f , -0.319801f , 1.0f,
					-0.394338f , -0.105662f , -0.288675f , 1.0f,
					-0.213201f , -0.319801f , -0.319801f , 1.0f,
					-0.319801f , -0.319801f , -0.213201f , 1.0f,
					-0.288675f , -0.394338f , -0.105662f , 1.0f,
					-0.394338f , -0.288675f , -0.105662f , 1.0f,
					-0.105662f , -0.394338f , -0.288675f , 1.0f,
					-0.445160f , -0.104423f , -0.202308f , 1.0f,
					-0.415735f ,  0.000000f , -0.277785f , 1.0f,
					-0.445160f , -0.202308f , -0.104423f , 1.0f,
					-0.479841f , -0.099377f , -0.099377f , 1.0f,
					-0.490393f , -0.097544f ,  0.000000f , 1.0f,
					-0.490393f ,  0.000000f , -0.097544f , 1.0f,
					-0.415735f , -0.277785f ,  0.000000f , 1.0f,
					-0.104423f , -0.445160f , -0.202308f , 1.0f,
					-0.099378f , -0.479841f , -0.099377f , 1.0f,
					-0.202308f , -0.445160f , -0.104423f , 1.0f,
					-0.277785f , -0.415735f ,  0.000000f , 1.0f,
					-0.097545f , -0.490393f ,  0.000000f , 1.0f,
					-0.099378f ,  0.099377f , -0.479842f , 1.0f,
					 0.000000f ,  0.097544f , -0.490393f , 1.0f,
					-0.202308f ,  0.104423f , -0.445160f , 1.0f,
					-0.104423f ,  0.202307f , -0.445160f , 1.0f,
					-0.105662f ,  0.288675f , -0.394338f , 1.0f,
					 0.000000f ,  0.277785f , -0.415735f , 1.0f,
					-0.288675f ,  0.105662f , -0.394338f , 1.0f,
					-0.213201f ,  0.319801f , -0.319801f , 1.0f,
					-0.105662f ,  0.394338f , -0.288675f , 1.0f,
					-0.319801f ,  0.213201f , -0.319801f , 1.0f,
					-0.319801f ,  0.319801f , -0.213201f , 1.0f,
					-0.394338f ,  0.288675f , -0.105662f , 1.0f,
					-0.288675f ,  0.394338f , -0.105662f , 1.0f,
					-0.394338f ,  0.105662f , -0.288675f , 1.0f,
					-0.104423f ,  0.445160f , -0.202308f , 1.0f,
					 0.000000f ,  0.415735f , -0.277785f , 1.0f,
					-0.202308f ,  0.445160f , -0.104423f , 1.0f,
					-0.099378f ,  0.479841f , -0.099377f , 1.0f,
					-0.097545f ,  0.490393f ,  0.000000f , 1.0f,
					 0.000000f ,  0.490393f , -0.097544f , 1.0f,
					-0.277785f ,  0.415735f ,  0.000000f , 1.0f,
					-0.445160f ,  0.104423f , -0.202308f , 1.0f,
					-0.479841f ,  0.099377f , -0.099377f , 1.0f,
					-0.445160f ,  0.202307f , -0.104423f , 1.0f,
					-0.415735f ,  0.277785f ,  0.000000f , 1.0f,
					-0.490393f ,  0.097544f ,  0.000000f , 1.0f,
					 0.099378f ,  0.099377f , -0.479842f , 1.0f,
					 0.104423f ,  0.202307f , -0.445160f , 1.0f,
					 0.202308f ,  0.104423f , -0.445160f , 1.0f,
					 0.288675f ,  0.105662f , -0.394338f , 1.0f,
					 0.105662f ,  0.288675f , -0.394338f , 1.0f,
					 0.319801f ,  0.213201f , -0.319801f , 1.0f,
					 0.394338f ,  0.105662f , -0.288675f , 1.0f,
					 0.213201f ,  0.319801f , -0.319801f , 1.0f,
					 0.319801f ,  0.319801f , -0.213201f , 1.0f,
					 0.288675f ,  0.394338f , -0.105662f , 1.0f,
					 0.394338f ,  0.288675f , -0.105662f , 1.0f,
					 0.105662f ,  0.394338f , -0.288675f , 1.0f,
					 0.445160f ,  0.104423f , -0.202308f , 1.0f,
					 0.445160f ,  0.202307f , -0.104423f , 1.0f,
					 0.479841f ,  0.099377f , -0.099377f , 1.0f,
					 0.490393f ,  0.097544f ,  0.000000f , 1.0f,
					 0.415735f ,  0.277785f ,  0.000000f , 1.0f,
					 0.104423f ,  0.445160f , -0.202308f , 1.0f,
					 0.099378f ,  0.479841f , -0.099377f , 1.0f,
					 0.202308f ,  0.445160f , -0.104423f , 1.0f,
					 0.277785f ,  0.415735f ,  0.000000f , 1.0f,
					 0.097545f ,  0.490393f ,  0.000000f , 1.0f,
					 0.000000f , -0.097544f ,  0.490393f , 1.0f,
					 0.099378f , -0.099377f ,  0.479842f , 1.0f,
					 0.097545f ,  0.000000f ,  0.490393f , 1.0f,
					 0.104423f , -0.202308f ,  0.445160f , 1.0f,
					 0.202308f , -0.104423f ,  0.445160f , 1.0f,
					 0.288675f , -0.105662f ,  0.394338f , 1.0f,
					 0.277785f ,  0.000000f ,  0.415735f , 1.0f,
					 0.000000f , -0.277785f ,  0.415735f , 1.0f,
					 0.105662f , -0.288675f ,  0.394338f , 1.0f,
					 0.319801f , -0.213201f ,  0.319801f , 1.0f,
					 0.394338f , -0.105662f ,  0.288675f , 1.0f,
					 0.213201f , -0.319801f ,  0.319801f , 1.0f,
					 0.319801f , -0.319801f ,  0.213201f , 1.0f,
					 0.288675f , -0.394338f ,  0.105662f , 1.0f,
					 0.394338f , -0.288675f ,  0.105662f , 1.0f,
					 0.105662f , -0.394338f ,  0.288675f , 1.0f,
					 0.445160f , -0.104423f ,  0.202308f , 1.0f,
					 0.415735f ,  0.000000f ,  0.277785f , 1.0f,
					 0.445160f , -0.202308f ,  0.104423f , 1.0f,
					 0.479841f , -0.099377f ,  0.099377f , 1.0f,
					 0.490393f ,  0.000000f ,  0.097544f , 1.0f,
					 0.000000f , -0.415735f ,  0.277785f , 1.0f,
					 0.104423f , -0.445160f ,  0.202308f , 1.0f,
					 0.099378f , -0.479841f ,  0.099377f , 1.0f,
					 0.202308f , -0.445160f ,  0.104423f , 1.0f,
					 0.000000f , -0.490393f ,  0.097544f , 1.0f,
					-0.097545f ,  0.000000f ,  0.490393f , 1.0f,
					-0.099378f , -0.099377f ,  0.479842f , 1.0f,
					-0.202308f , -0.104423f ,  0.445160f , 1.0f,
					-0.104423f , -0.202308f ,  0.445160f , 1.0f,
					-0.105662f , -0.288675f ,  0.394338f , 1.0f,
					-0.277785f ,  0.000000f ,  0.415735f , 1.0f,
					-0.288675f , -0.105662f ,  0.394338f , 1.0f,
					-0.213201f , -0.319801f ,  0.319801f , 1.0f,
					-0.105662f , -0.394338f ,  0.288675f , 1.0f,
					-0.319801f , -0.213201f ,  0.319801f , 1.0f,
					-0.319801f , -0.319801f ,  0.213201f , 1.0f,
					-0.394338f , -0.288675f ,  0.105662f , 1.0f,
					-0.288675f , -0.394338f ,  0.105662f , 1.0f,
					-0.394338f , -0.105662f ,  0.288675f , 1.0f,
					-0.104423f , -0.445160f ,  0.202308f , 1.0f,
					-0.202308f , -0.445160f ,  0.104423f , 1.0f,
					-0.099378f , -0.479841f ,  0.099377f , 1.0f,
					-0.415735f ,  0.000000f ,  0.277785f , 1.0f,
					-0.445160f , -0.104423f ,  0.202308f , 1.0f,
					-0.479841f , -0.099377f ,  0.099377f , 1.0f,
					-0.445169f , -0.202308f ,  0.104423f , 1.0f,
					-0.490393f ,  0.000000f ,  0.097544f , 1.0f,
					 0.000000f ,  0.097544f ,  0.490393f , 1.0f,
					-0.099378f ,  0.099377f ,  0.479842f , 1.0f,
					-0.104423f ,  0.202307f ,  0.445160f , 1.0f,
					-0.202308f ,  0.104423f ,  0.445160f , 1.0f,
					-0.288675f ,  0.105662f ,  0.394338f , 1.0f,
					 0.000000f ,  0.277785f ,  0.415735f , 1.0f,
					-0.105662f ,  0.288675f ,  0.394338f , 1.0f,
					-0.319801f ,  0.213201f ,  0.319801f , 1.0f,
					-0.394338f ,  0.105662f ,  0.288675f , 1.0f,
					-0.213201f ,  0.319801f ,  0.319801f , 1.0f,
					-0.319801f ,  0.319801f ,  0.213201f , 1.0f,
					-0.288675f ,  0.394338f ,  0.105662f , 1.0f,
					-0.394338f ,  0.288675f ,  0.105662f , 1.0f,
					-0.105662f ,  0.394338f ,  0.288675f , 1.0f,
					-0.445160f ,  0.104423f ,  0.202308f , 1.0f,
					-0.445160f ,  0.202307f ,  0.104423f , 1.0f,
					-0.479841f ,  0.099377f ,  0.099377f , 1.0f,
					 0.000000f ,  0.415735f ,  0.277785f , 1.0f,
					-0.104423f ,  0.445160f ,  0.202308f , 1.0f,
					-0.099378f ,  0.479841f ,  0.099377f , 1.0f,
					-0.202308f ,  0.445160f ,  0.104423f , 1.0f,
					 0.000000f ,  0.490393f ,  0.097544f , 1.0f,
					 0.099378f ,  0.099377f ,  0.479842f , 1.0f,
					 0.202308f ,  0.104423f ,  0.445160f , 1.0f,
					 0.104423f ,  0.202307f ,  0.445160f , 1.0f,
					 0.105662f ,  0.288675f ,  0.394338f , 1.0f,
					 0.288675f ,  0.105662f ,  0.394338f , 1.0f,
					 0.213201f ,  0.319801f ,  0.319801f , 1.0f,
					 0.105662f ,  0.394338f ,  0.288675f , 1.0f,
					 0.319801f ,  0.213201f ,  0.319801f , 1.0f,
					 0.319801f ,  0.319801f ,  0.213201f , 1.0f,
					 0.394338f ,  0.288675f ,  0.105662f , 1.0f,
					 0.288675f ,  0.394338f ,  0.105662f , 1.0f,
					 0.394338f ,  0.105662f ,  0.288675f , 1.0f,
					 0.104423f ,  0.445160f ,  0.202308f , 1.0f,
					 0.202308f ,  0.445160f ,  0.104423f , 1.0f,
					 0.099378f ,  0.479841f ,  0.099377f , 1.0f,
					 0.445160f ,  0.104423f ,  0.202308f , 1.0f,
					 0.479841f ,  0.099377f ,  0.099377f , 1.0f,
					 0.445160f ,  0.202307f ,  0.104423f , 1.0f
				};

				inline static unsigned int TrianglesArray[] =
				{
					  0,   66,   68,
					 68,   66,   67,
					 68,   67,   20,
					 66,   18,   67,
					 20,   67,   70,
					 70,   67,   69,
					 70,   69,   19,
					 67,   18,   69,
					 20,   70,   72,
					 72,   70,   71,
					 72,   71,    8,
					 70,   19,   71,
					 18,   73,   69,
					 69,   73,   74,
					 69,   74,   19,
					 73,    6,   74,
					  8,   71,   76,
					 76,   71,   75,
					 76,   75,   22,
					 71,   19,   75,
					 22,   75,   78,
					 78,   75,   77,
					 78,   77,   21,
					 75,   19,   77,
					 22,   78,   80,
					 80,   78,   79,
					 80,   79,    7,
					 78,   21,   79,
					 19,   74,   77,
					 77,   74,   81,
					 77,   81,   21,
					 74,    6,   81,
					  8,   76,   83,
					 83,   76,   82,
					 83,   82,   24,
					 76,   22,   82,
					 24,   82,   85,
					 85,   82,   84,
					 85,   84,   23,
					 82,   22,   84,
					 24,   85,   87,
					 87,   85,   86,
					 87,   86,    2,
					 85,   23,   86,
					 22,   80,   84,
					 84,   80,   88,
					 84,   88,   23,
					 80,    7,   88,
					  6,   89,   81,
					 81,   89,   90,
					 81,   90,   21,
					 89,   25,   90,
					 21,   90,   92,
					 92,   90,   91,
					 92,   91,   26,
					 90,   25,   91,
					 21,   92,   79,
					 79,   92,   93,
					 79,   93,    7,
					 92,   26,   93,
					 25,   94,   91,
					 91,   94,   95,
					 91,   95,   26,
					 94,    1,   95,
					  0,   68,   97,
					 97,   68,   96,
					 97,   96,   28,
					 68,   20,   96,
					 28,   96,   99,
					 99,   96,   98,
					 99,   98,   27,
					 96,   20,   98,
					 28,   99,  101,
					101,   99,  100,
					101,  100,   10,
					 99,   27,  100,
					 20,   72,   98,
					 98,   72,  102,
					 98,  102,   27,
					 72,    8,  102,
					 10,  100,  104,
					104,  100,  103,
					104,  103,   30,
					100,   27,  103,
					 30,  103,  106,
					106,  103,  105,
					106,  105,   29,
					103,   27,  105,
					 30,  106,  108,
					108,  106,  107,
					108,  107,    9,
					106,   29,  107,
					 27,  102,  105,
					105,  102,  109,
					105,  109,   29,
					102,    8,  109,
					 10,  104,  111,
					111,  104,  110,
					111,  110,   32,
					104,   30,  110,
					 32,  110,  113,
					113,  110,  112,
					113,  112,   31,
					110,   30,  112,
					 32,  113,  115,
					115,  113,  114,
					115,  114,    3,
					113,   31,  114,
					 30,  108,  112,
					112,  108,  116,
					112,  116,   31,
					108,    9,  116,
					  8,   83,  109,
				    109,    83,  117,
				    109,   117,   29,
					 83,    24,  117,
					 29,   117,  119,
				    119,   117,  118,
				    119,   118,   33,
				    117,    24,  118,
					 29,   119,  107,
				    107,   119,  120,
				    107,   120,    9,
				    119,    33,  120,
					 24,    87,  118,
				    118,    87,  121,
				    118,   121,   33,
					 87,     2,  121,
					  0,    97,  123,
				    123,    97,  122,
				    123,   122,   35,
				 	 97,    28,  122,
			 		 35,   122,  125,
				    125,   122,  124,
				    125,   124,   34,
				    122,    28,  124,
					 35,   125,  127,
				    127,   125,  126,
				    127,   126,   12,
				    125,    34,  126,
					 28,   101,  124,
				    124,  101,   128,
				    124,  128,    34,
				    101,   10,   128,
					 12,  126,   130,
				    130,  126,   129,
				    130,  129,    37,
				    126,   34,   129,
					 37,  129,   132,
				    132,  129,   131,
				    132,  131,    36,
				    129,   34,   131,
					 37,  132,   134,
				    134,  132,   133,
				    134,  133,    11,
				    132,   36,   133,
					 34,  128,   131,
				    131,  128,   135,
				    131,  135,    36,
				    128,   10,   135,
					 12,  130,   137,
				    137,  130,   136,
				    137,  136,    39,
				    130,   37,   136,
					 39,  136,   139,
				    139,  136,   138,
				    139,  138,    38,
				    136,   37,   138,
					 39,  139,   141,
				    141,  139,   140,
				    141,  140,     4,
				    139,   38,   140,
					 37,  134,   138,
				    138,  134,   142,
				    138,  142,    38,
				    134,   11,   142,
					 10,  111,   135,
				    135,  111,   143,
				    135,  143,    36,
				    111,   32,   143,
					 36,  143,   145,
				    145,  143,   144,
				    145,  144,    40,
				    143,   32,   144,
					 36,  145,   133,
				    133,  145,   146,
				    133,  146,    11,
				    145,   40,   146,
					 32,  115,   144,
				    144,  115,   147,
				    144,  147,    40,
				    115,    3,   147,
					  0,  123,    66,
					 66,  123,   148,
					 66,  148,    18,
				    123,   35,   148,
					 18,  148,   150,
				    150,  148,   149,
				    150,  149,    41,
				    148,   35,   149,
					 18,  150,    73,
					 73,  150,   151,
					 73,  151,     6,
				    150,   41,   151,
					 35,  127,   149,
				    149,  127,   152,
				    149,  152,    41,
				    127,   12,   152,
					  6,  151,   154,
				    154,  151,   153,
				    154,  153,    43,
				    151,   41,   153,
					 43,  153,   156,
				    156,  153,   155,
				    156,  155,    42,
				    153,   41,   155,
					 43,  156,   158,
				    158,  156,   157,
				    158,  157,    13,
				    156,   42,   157,
					 41,  152,   155,
				    155,  152,   159,
				    155,  159,    42,
				    152,   12,   159,
					  6,  154,    89,
				 	 89,  154,   160,
					 89,  160,    25,
				    154,   43,   160,
					 25,  160,   162,
				    162,  160,   161,
				    162,  161,    44,
				    160,   43,   161,
					 25,  162,    94,
					 94,  162,   163,
					 94,  163,     1,
				    162,   44,   163,
					 43,  158,   161,
		 		    161,  158,   164,
				    161,  164,    44,
				    158,   13,   164,
					 12,  137,   159,
				    159,  137,   165,
				    159,  165,    42,
				    137,   39,   165,
					 42,  165,   167,
				    167,  165,   166,
				    167,  166,    45,
			  	    165,   39,   166,
					 42,  167,   157,
				    157,  167,   168,
				    157,  168,    13,
				    167,   45,   168,
					 39,  141,   166,
				    166,  141,   169,
				    166,  169,    45,
				    141,    4,   169,
					  5,  170,   172,
				   172,  170,   171,
				   172,  171,    48,
				   170,  46,    171,
					48,  171,   174,
				   174,  171,   173,
				   174,  173,    47,
				   171,   46,   173,
					48,  174,   176,
				   176,  174,   175,
				   176,  175,    15,
				   174,   47, 175,
					46, 177, 173,
				   173, 177, 178,
				   173, 178, 47,
				   177,  14, 178,
					15, 175, 180,
				   180, 175, 179,
				   180, 179, 50,
				   175,  47, 179,
					50, 179, 182,
				   182, 179, 181,
				   182, 181, 49,
				   179,  47, 181,
					50, 182, 184,
				   184, 182, 183,
				   184, 183, 7,
				   182,  49, 183,
					47, 178, 181,
				   181, 178, 185,
				   181, 185, 49,
				   178,  14, 185,
					15, 180, 187,
				   187, 180, 186,
				   187, 186, 51,
				   180, 50, 186,
					51, 186, 189,
				   189, 186, 188,
				   189, 188, 26,
				   186, 50, 188,
					51, 189, 190,
				   190, 189, 95,
				   190, 95, 1,
				   189, 26, 95,
					50, 184, 188,
				   188, 184, 93,
				   188, 93, 26,
				   184, 7, 93,
					14, 191, 185,
				   185, 191, 192,
				   185, 192, 49,
				   191, 52, 192,
					49, 192, 194,
				   194, 192, 193,
				   194, 193, 23,
				   192, 52, 193,
					49, 194, 183,
				   183, 194, 88,
				   183, 88, 7,
				   194, 23, 88,
					52, 195, 193,
				   193, 195, 86,
				   193, 86, 23,
				   195, 2, 86,
					 5, 196, 170,
				   170, 196, 197,
				   170, 197, 46,
				   196, 53, 197,
				   46, 197, 199,
						 199, 197, 198,
						 199, 198, 54,
						 197, 53, 198,
						 46, 199, 177,
						 177, 199, 200,
						 177, 200, 14,
						 199, 54, 200,
							 53, 201, 198,
							 198, 201, 202,
							 198, 202, 54,
							 201, 16, 202,
							 14, 200, 204,
							 204, 200, 203,
							 204, 203, 56,
							 200, 54, 203,
							 56, 203, 206,
							 206, 203, 205,
							 206, 205, 55,
							 203, 54, 205,
							 56, 206, 208,
							 208, 206, 207,
							 208, 207, 9,
							 206, 55, 207,
							 54, 202, 205,
							 205, 202, 209,
							 205, 209, 55,
							 202, 16, 209,
							 14, 204, 191,
							 191, 204, 210,
							 191, 210, 52,
							 204, 56, 210,
							 52, 210, 212,
							 212, 210, 211,
							 212, 211, 33,
							 210, 56, 211,
							 52, 212, 195,
							 195, 212, 121,
							 195, 121, 2,
							 212, 33, 121,
							 56, 208, 211,
							 211, 208, 120,
							 211, 120, 33,
							 208, 9, 120,
							 16, 213, 209,
							 209, 213, 214,
							 209, 214, 55,
							 213, 57, 214,
							 55, 214, 216,
							 216, 214, 215,
							 216, 215, 31,
							 214, 57, 215,
							 55, 216, 207,
							 207, 216, 116,
							 207, 116, 9,
							 216, 31, 116,
							 57, 217, 215,
							 215, 217, 114,
							 215, 114, 31,
							 217, 3, 114,
							5, 218, 196,
							 196, 218, 219,
							 196, 219, 53,
							 218, 58, 219,
							 53, 219, 221,
							 221, 219, 220,
							 221, 220, 59,
							 219, 58, 220,
							 53, 221, 201,
							 201, 221, 222,
							 201, 222, 16,
							 221, 59, 222,
							 58, 223, 220,
							 220, 223, 224,
							 220, 224, 59,
							 223, 17, 224,
							 16, 222, 226,
							 226, 222, 225,
							 226, 225, 61,
							 222, 59, 225,
							 61, 225, 228,
							 228, 225, 227,
							 228, 227, 60,
							 225, 59, 227,
							 61, 228, 230,
							 230, 228, 229,
							 230, 229, 11,
							 228, 60, 229,
							 59, 224, 227,
							 227, 224, 231,
							 227, 231, 60,
							 224, 17, 231,
							 16, 226, 213,
							 213, 226, 232,
							 213, 232, 57,
							 226, 61, 232,
							 57, 232, 234,
							 234, 232, 233,
							 234, 233, 40,
							 232, 61, 233,
							 57, 234, 217,
							 217, 234, 147,
							 217, 147, 3,
							 234, 40, 147,
							 61, 230, 233,
							 233, 230, 146,
							 233, 146, 40,
							 230, 11, 146,
							 17, 235, 231,
							 231, 235, 236,
							 231, 236, 60,
							 235, 62, 236,
							 60, 236, 238,
							 238, 236, 237,
							 238, 237, 38,
							 236, 62, 237,
							 60, 238, 229,
							 229, 238, 142,
							 229, 142, 11,
							 238, 38, 142,
							 62, 239, 237,
							 237, 239, 140,
							 237, 140, 38,
							 239, 4, 140,
							 5, 172, 218,
							 218, 172, 240,
							 218, 240, 58,
							 172, 48, 240,
							 58, 240, 242,
							 242, 240, 241,
							 242, 241, 63,
						 240, 48, 241,
						 58, 242, 223,
						 223, 242, 243,
						 223, 243, 17,
						 242, 63, 243,
						 48, 176, 241,
						 241, 176, 244,
						 241, 244, 63,
						 176, 15, 244,
						 17, 243, 246,
						 246, 243, 245,
						 246, 245, 65,
						 243, 63, 245,
						 65, 245, 248,
						 248, 245, 247,
						 248, 247, 64,
						 245, 63, 247,
						 65, 248, 250,
						 250, 248, 249,
						 250, 249, 13,
						 248, 64, 249,
						 63, 244, 247,
						 247, 244, 251,
						 247, 251, 64,
						 244, 15, 251,
						 17, 246, 235,
						 235, 246, 252,
						 235, 252, 62,
						 246, 65, 252,
						 62, 252, 254,
						 254, 252, 253,
						 254, 253, 45,
						 252, 65, 253,
						 62, 254, 239,
						 239, 254, 169,
						 239, 169, 4,
						 254, 45, 169,
						 65, 250, 253,
						 253, 250, 168,
					 253, 168, 45,
					 250, 13, 168,
					 15, 187, 251,
					 251, 187, 255,
					 251, 255, 64,
					 187, 51, 255,
					 64, 255, 257,
					 257, 255, 256,
					 257, 256, 44,
					 255, 51, 256,
					 64, 257, 249,
					 249, 257, 164,
					 249, 164, 13,
					 257, 44, 164,
					  51,  190,  256,
					 256,  190,  163,
					 256,  163,   44,
					 190,    1,  163
				};
				
			private:
				
				float						   Radius;								// radius
				vml::geo3d::AABBox			   BoundingBox;							// bounding box
				GLuint						   VAOid;								// vertex array object id
				GLuint						   BufferObject;						// buffer objects
				GLuint						   IndexBufferObject;					// surface index buffer object
				GLint						   ColorLocation;
				GLint						   ModelViewProjectionMatrixLocation;
				GLuint						   ShaderProgram;
				vml::shaders::GlShaderProgram* Shader;

				// shader filename

				const std::string ShaderFilename = vml::utils::GlobalPaths::GetInstance()->GetFullDebugPath() + "/shaders/debug_single_color.shd";

			public:
			
				/////////////////////////////////////////////////////////////////////////////////////////
				// draw bounding sphere for model's object
			
				void Draw(vml::views::View *view,
						  const glm::vec3 &pos,
						  const float radius,
						  const glm::vec4 &col) const
				{
					if (view)
					{
					
						glm::mat4 m;

						float* mptr = glm::value_ptr(m);

						// scale parent matrix
				
						mptr[0] = radius*2;
						mptr[1] = 0;
						mptr[2] = 0;
						mptr[3] = 0;
						mptr[4] = 0;
						mptr[5] = radius*2;
						mptr[6] = 0;
						mptr[7] = 0;
						mptr[8] = 0;
						mptr[9] = 0;
						mptr[10] = radius*2;
						mptr[11] = 0;
						mptr[12] = pos.x;
						mptr[13] = pos.y;
						mptr[14] = pos.z;
						mptr[15] = 1;

						glm::mat4 mvp = view->GetViewProjection() * m;

						// Use debug shader

						glUseProgram(ShaderProgram);
						glUniformMatrix4fv(ModelViewProjectionMatrixLocation, 1, GL_FALSE, glm::value_ptr(mvp));
						glUniform4f(ColorLocation, col[0], col[1], col[2], col[3]);

						glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
						glDisable(GL_CULL_FACE);
						glBindVertexArray(VAOid);
						glDrawElements(
										GL_TRIANGLES,		// mode
										Indices,			// count
										GL_UNSIGNED_INT,	// type
										(void*)0			// element array buffer offset
									);

						glBindVertexArray(0);
						glBindBuffer(GL_ARRAY_BUFFER, 0);
						glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
						glUseProgram(0);
					
					}
					else
					{
						vml::os::Message::Error("Sphere : ","Null matrix cam for cube rendering");
					}
				}

				/////////////////////////////////////////////////////////////////////////////////////////
				// draw bounding sphere for model's object

				void Draw(vml::views::View* view,
						  const glm::mat4& m,
						  const glm::vec4& col) const
				{
					if (view)
					{

						glm::mat4 mvp = view->GetViewProjection() * m;

						// Use debug shader

						glUseProgram(ShaderProgram);
						glUniformMatrix4fv(ModelViewProjectionMatrixLocation, 1, GL_FALSE, glm::value_ptr(mvp));
						glUniform4f(ColorLocation, col[0], col[1], col[2], col[3]);

						glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
						glDisable(GL_CULL_FACE);
						glBindVertexArray(VAOid);
						glDrawElements(
							GL_TRIANGLES,		// mode
							Indices,			// count
							GL_UNSIGNED_INT,	// type
							(void*)0			// element array buffer offset
						);

						glBindVertexArray(0);
						glBindBuffer(GL_ARRAY_BUFFER, 0);
						glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
						glUseProgram(0);

					}
					else
					{
						vml::os::Message::Error("Sphere : ","Null matrix cam for cube rendering");
					}
				}
				
				// ---------------------------------------------------------------
				// constructors / destructors

				Sphere()
				{
					
					Radius			   = 1;		
					BoundingBox		   = vml::geo3d::AABBox( glm::vec3(-0.5, -0.5, -0.5),glm::vec3(0.5, 0.5, 0.5));
				
					VAOid			  = 0;
					IndexBufferObject = 0;
					BufferObject	  = 0;

					// Create the VAO for axis aligned bounding box

					glGenVertexArrays(1, &VAOid);
					glBindVertexArray(VAOid);

					// Create the Vertex Buffer Object 

					glGenBuffers(1, &BufferObject);

					GLuint AttributePosition = vml::shaders::GlShaderProgram::ATTRIBUTE_POSITION;

					glBindBuffer(GL_ARRAY_BUFFER, BufferObject);
					glBufferData(GL_ARRAY_BUFFER, (long long)Vertices * 4 * sizeof(float), &VertexPositionArray[0], GL_STATIC_DRAW);
					glEnableVertexAttribArray(AttributePosition);
					glVertexAttribPointer(AttributePosition, 4, GL_FLOAT, GL_FALSE, 0, 0);

					// Create the Index Buffer Object 

					glGenBuffers(1, &IndexBufferObject);
					glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, IndexBufferObject);
					glBufferData(GL_ELEMENT_ARRAY_BUFFER, Indices * sizeof(GLuint), &TrianglesArray[0], GL_STATIC_DRAW);

					// unbinds buffers

					glBindVertexArray(0);
					glBindBuffer(GL_ARRAY_BUFFER, 0);
					glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
					glUseProgram(0);

					// attach shader
					
					Shader = vml::stores::ShaderStore->Load<vml::shaders::GlShaderProgram>(ShaderFilename, {});

					// shader locations

					ShaderProgram = Shader->GetID();
					glUseProgram(ShaderProgram);
					ModelViewProjectionMatrixLocation = Shader->GetModelViewProjectionMatrixLocation();
					ColorLocation = glGetUniformLocation(ShaderProgram, "Color");
					glUseProgram(0);
				
				}

				// destructor

				~Sphere()
				{
					if (VAOid) { glDeleteVertexArrays(1, &VAOid); VAOid = 0; }
					if (IndexBufferObject) { glDeleteBuffers(1, &IndexBufferObject); IndexBufferObject = 0; }
					if (BufferObject) { glDeleteBuffers(1, &BufferObject); BufferObject = 0; }
					vml::stores::ShaderStore->UnLoad(ShaderFilename);
				}

		};

	} // end of meshes namespace

} // end of vml namespace
